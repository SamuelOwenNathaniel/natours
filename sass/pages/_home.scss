.section-about{
    background-color: $color-grey-light-1;
    padding: 25rem 0;
    //move everything up to fill the space left by the header image wedge.
    margin-top: -20vh;

    @include respond(tab-port){
        padding: 20rem 0;
    }
}

.section-features{
    padding: 20rem 0;
    background-image: linear-gradient(to right bottom, 
    rgba($color-primary-light, 0.8),
    rgba($color-primary-dark, 0.8)), 
    url(../img/nat-4.jpg);
    background-size: cover;
    //another way of clipping the image to a custom polygon frame
    transform: skewY(-7deg);
    
    //remove the space between the top section and this one created from the skewing
    margin-top: -10rem;

    /*Now we compensate for the skewed boxes in the features section.
    We could have alternatively skewed the _feature-boxes.scss in opposite direction,
    but the approach used here instead is better for future proofing. We use the direct child selector*/

    //select all direct children of the section-feature class
    & > * {
        transform: skewY(7deg);
    }

    @include respond(tab-port){
        padding: 10rem 0;
    }

}

.section-tours{
    background-color: $color-grey-light-1;
    padding: 25rem 0 15rem 0; //top, right, bottom, left
    //move everything up to fill the space left by the header image wedge.
    margin-top: -20vh;

    @include respond(tab-port){
        padding: 30rem 0 10rem 0;
    } 
}


.section-stories{
    position: relative;
    padding: 15rem 0;

    @include respond(tab-port){
        padding: 10rem 0;
    }
}

.section-book{
    padding: 15rem 0;
    background-image: linear-gradient(to right bottom, $color-primary-light, $color-primary-dark);

    @include respond(tab- port){
        padding: 10rem 0;
    }

}

.book{
    /*apply white overlay on the image. Instead of using another element and clip path we use an alternative approach of color gradient.
    to accomplish this we apply two bg 'images' to the component, the latter is the actual bg image.
    With the linear gradient, instead of using 'to right bottom' we can specify an angle.
    

    background-image: linear-gradient(105deg,  ---here we specify the angle of rotation.
        rgba($color-white, 0.8)0%, --we set where to start the gradient with the first color.
        rgba($color-white, 0.8)50%,  --where to stop the gradient with the first color.
        transparent 50%), --transparent is a valid css color element. Also we specify the amount of transparency
    url(../img/nat-10.jpg); --source image for bg.
    
    */
    background-image: linear-gradient(105deg,
            rgba($color-white, 0.8)0%,
            rgba($color-white, 0.8)50%, 
            transparent 50%),
        url(../img/nat-10.jpg);

    background-size: 100%; //can also use cover here as well.
    border-radius: 3px;
    box-shadow: 0 1.5rem 4rem rgba($color-black, .7);
    

    @include respond(tab-land){
        background-image: linear-gradient(105deg,
            rgba($color-white, 0.8)0%,
            rgba($color-white, 0.8)65%, 
            transparent 65%),
            url(../img/nat-10.jpg);
            background-size: cover;
    }

    @include respond(tab-port){
        background-image: linear-gradient(to right,
            rgba($color-white, 0.8)0%,
            rgba($color-white, 0.8)100%),
            url(../img/nat-10.jpg);
    }



    &__form{
        width:50%;
        padding: 6rem;
        @include respond(tab-land){
            width: 65%;
       }

       @include respond(tab-port){
            width: 100%;
        }

    }
}